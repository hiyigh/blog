plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.jetbrains.kotlin.jvm" version "1.9.20-RC2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "com.github.node-gradle.node" version "3.1.0"
    id 'java'
}

jar {
    enabled = false
}

group = 'blogProject3'
version = '0.0.1-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = '11'

repositories { // 라이브러리 저장소
    mavenCentral() // maven 형식을 사용한다.
    gradlePluginPortal() // gradle 플러그인 검색할 수 있는 공식 저장소
}

ext {
    kotlin_version = '1.9.20-RC2'
}

dependencies {
    // 웹 개발 및 뷰 랜더링 dependency
    implementation 'org.springframework.boot:spring-boot-starter-web'    
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // database and ORM
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java'
    // security and authorization
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // data mapping and query
    // error monitoring

    // 문서 관리 및 처리
    // 외부 라이브러리 연동
    // 기타 라이브러리 및 유틸리티
    // 테스트 관련

    implementation 'io.sentry:sentry-spring-boot-starter:5.6.1'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.github.node-gradle:gradle-node-plugin:3.1.0'
    implementation group: 'org.kohsuke', name: 'github-api', version: '1.133'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'

    // frontend working
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.17.0'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.14.3'
    implementation 'org.commonmark:commonmark-ext-gfm-tables:0.18.0'
    implementation group: 'org.jdom', name: 'jdom2', version: '2.0.6'
    implementation group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.9.2'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.152'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'

    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    annotationProcessor'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation group: 'org.mockito.kotlin', name: 'mockito-kotlin', version: '4.0.0'

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.test {
    useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}


compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


// NPM 설정

node {
    version = '17.0.0'
    download = true
    nodeModulesDir = file("${projectDir}/src/main/resources/static")
}

task copyFrontLib(type: Copy) {
    from "${projectDir}/src/main/resources/static"
    into "${projectDir}/build/resources/main/static/."
}
copyFrontLib.dependsOn npmInstall
processResources.dependsOn npmInstall
compileJava.dependsOn copyFrontLib

